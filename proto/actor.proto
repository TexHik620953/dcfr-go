syntax = "proto3";

package poker;

option go_package = ".;poker";

// Определение карты
message Card {
  int32 value = 1;  // Числовое значение карты
}

// Состояние игры
message GameState {
  repeated int32 players_pots = 1;   // Банки игроков
  repeated int32 stakes = 2;         // Текущие ставки игроков
  map<int32, bool> legal_actions = 3; // Доступные действия (ключ - действие, значение - всегда true)
  GameStage stage = 4;               // Текущая стадия игры
  int32 current_player = 5;          // ID текущего игрока

  repeated Card public_cards = 6;    // Общие карты на столе
  repeated Card private_cards = 7;   // Карты текущего игрока
}

// Стадии игры
enum GameStage {
  PREFLOP = 0;
  FLOP = 1;
  TURN = 2;
  RIVER = 3;
  SHOWDOWN = 4;
}

// Интерфейс Actor
service Actor {
  // Получить действие для текущего состояния
  rpc GetAction (GameStateRequest) returns (ActionResponse) {}
  
  // Получить вероятности действий
  rpc GetProbs (GameStateRequest) returns (ActionProbsResponse) {}
}

// Запрос состояния игры
message GameStateRequest {
  GameState state = 1;
}

// Ответ с действием
message ActionResponse {
  int32 action = 1;  // Числовое значение действия
}

// Ответ с вероятностями действий
message ActionProbsResponse {
  map<int32, float> action_probs = 1;  // Карта вероятностей действий
}

// Дополнительные типы действий (можно расширять)
enum ActionType {
  FOLD = 0;
  CHECK = 1;
  CALL = 2;
  RAISE = 3;
  ALL_IN = 4;
}