// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/infra/actor.proto

package infra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Actor_GetProbs_FullMethodName = "/infra.Actor/GetProbs"
	Actor_Train_FullMethodName    = "/infra.Actor/Train"
	Actor_Save_FullMethodName     = "/infra.Actor/Save"
	Actor_Reset_FullMethodName    = "/infra.Actor/Reset"
)

// ActorClient is the client API for Actor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Интерфейс Actor
type ActorClient interface {
	// Получить вероятности действий для игрока
	GetProbs(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (*ActionProbsResponse, error)
	// Тренировать сеть
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	// Сохранить сети
	Save(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Сбросить сети до стартового состояния
	Reset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type actorClient struct {
	cc grpc.ClientConnInterface
}

func NewActorClient(cc grpc.ClientConnInterface) ActorClient {
	return &actorClient{cc}
}

func (c *actorClient) GetProbs(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (*ActionProbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionProbsResponse)
	err := c.cc.Invoke(ctx, Actor_GetProbs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, Actor_Train_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) Save(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Actor_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) Reset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Actor_Reset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActorServer is the server API for Actor service.
// All implementations must embed UnimplementedActorServer
// for forward compatibility.
//
// Интерфейс Actor
type ActorServer interface {
	// Получить вероятности действий для игрока
	GetProbs(context.Context, *GameStateRequest) (*ActionProbsResponse, error)
	// Тренировать сеть
	Train(context.Context, *TrainRequest) (*TrainResponse, error)
	// Сохранить сети
	Save(context.Context, *Empty) (*Empty, error)
	// Сбросить сети до стартового состояния
	Reset(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedActorServer()
}

// UnimplementedActorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActorServer struct{}

func (UnimplementedActorServer) GetProbs(context.Context, *GameStateRequest) (*ActionProbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProbs not implemented")
}
func (UnimplementedActorServer) Train(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedActorServer) Save(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedActorServer) Reset(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedActorServer) mustEmbedUnimplementedActorServer() {}
func (UnimplementedActorServer) testEmbeddedByValue()               {}

// UnsafeActorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorServer will
// result in compilation errors.
type UnsafeActorServer interface {
	mustEmbedUnimplementedActorServer()
}

func RegisterActorServer(s grpc.ServiceRegistrar, srv ActorServer) {
	// If the following call pancis, it indicates UnimplementedActorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Actor_ServiceDesc, srv)
}

func _Actor_GetProbs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).GetProbs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actor_GetProbs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).GetProbs(ctx, req.(*GameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actor_Train_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actor_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).Save(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actor_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).Reset(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Actor_ServiceDesc is the grpc.ServiceDesc for Actor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infra.Actor",
	HandlerType: (*ActorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProbs",
			Handler:    _Actor_GetProbs_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _Actor_Train_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Actor_Save_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Actor_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/infra/actor.proto",
}
